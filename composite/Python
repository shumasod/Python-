from abc import ABC, abstractmethod
from typing import List

# Component（コンポーネント）- 抽象基底クラス
class Component(ABC):
    @abstractmethod
    def operation(self) -> None:
        pass
    
    def add(self, component: 'Component') -> None:
        pass
    
    def remove(self, component: 'Component') -> None:
        pass
    
    def get_child(self, index: int) -> 'Component':
        pass

# Leaf（葉）- 個別のオブジェクト
class Leaf(Component):
    def __init__(self, name: str) -> None:
        self.name = name
    
    def operation(self) -> None:
        print(f"Leaf {self.name} operation")
    
    def add(self, component: Component) -> None:
        print("Cannot add to a leaf")
    
    def remove(self, component: Component) -> None:
        print("Cannot remove from a leaf")
    
    def get_child(self, index: int) -> Component:
        return None

# Composite（複合体）- コンポーネントのコレクション
class Composite(Component):
    def __init__(self, name: str) -> None:
        self.name = name
        self.children: List[Component] = []
    
    def operation(self) -> None:
        print(f"Composite {self.name} operation")
        # 子コンポーネントに処理を委譲
        for child in self.children:
            child.operation()
    
    def add(self, component: Component) -> None:
        self.children.append(component)
    
    def remove(self, component: Component) -> None:
        self.children.remove(component)
    
    def get_child(self, index: int) -> Component:
        return self.children[index]

# クライアント
if __name__ == "__main__":
    leaf1 = Leaf("A")
    leaf2 = Leaf("B")
    leaf3 = Leaf("C")
    
    composite1 = Composite("X")
    composite2 = Composite("Y")
    
    composite1.add(leaf1)
    composite1.add(leaf2)
    
    composite2.add(leaf3)
    composite2.add(composite1)
    
    # 複合オブジェクトに対する操作
    composite2.operation()
